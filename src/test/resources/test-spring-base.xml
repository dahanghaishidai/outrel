<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"  xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
	default-lazy-init="true">

	<description>Spring公共配置 </description>
	
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入  将 Controller 排除-->
	<context:component-scan base-package="com.jy">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>


	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:/test-jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 数据库连接池配置 -->
		<property name="initialSize" value="${jdbc.initialPoolSize}" />
		<!-- 初始化连接数量 -->
		<property name="maxActive" value="${jdbc.maxPoolSize}" />
		<!-- 最大连接数量 -->
		<property name="maxIdle" value="${jdbc.maxIdlePollSize}" />
		<!-- 最大空闲连接数量 -->
		<property name="minIdle" value="${jdbc.mixIdlePollSize}" />
		<!-- 最小空闲连接数量 -->
	</bean>
	
	
    <!-- MyBatis配置 -->
    <bean id="pageInterceptor" class="com.jy.platform.restservice.mybatis.PageInterceptor"></bean>    
	<bean id="sqlSessionFactory" class="com.jy.platform.restservice.mybatis.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="plugins">  
            <ref bean="pageInterceptor"/>  
        </property>  
		<!-- 自动扫描domain目录, 配置包的基路径即可，多个包用;分割 -->
		<property name="typeAliasesPackage" value="com.jy" />
		<!-- 显式指定Mapper文件位置 -->	
		<!-- <property name="mapperLocations" value="classpath*:**/*Mapper.xml" /> -->
		<property name="mapperLocations" >
			<list>
				<value>classpath*:com/jy/**/dao/*Mapper.xml</value>
				<value>classpath*:mybatis/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jy" />
		<property name="annotationClass" value="com.jy.platform.core.mybatis.MyBatisRepository"/>
	</bean>
	
	<!-- 事务管理start -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

	<!-- 使用annotation 定义 注解事务 优先 使用注解事务 order="0" -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" order="0" />
	<!-- 用注解来实现事务管理 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/> -->
	
	<!-- 以AspectJ方式 定义 AOP 用于事务拦截 -->
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.jy..service..*.*(..))" advice-ref="txAdvice" order="1"/>
	</aop:config>
	<!-- 基本事务定义,使用transactionManager作事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />	
			<tx:method name="create*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception,RuntimeException"/>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="do*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="*" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>
	<!-- 事务管理 end -->
	
	<!-- 定义检测执行时间的拦截器start -->
	<bean id="performanceInterceptor" class="com.jy.platform.restservice.spring.PerformanceInterceptor">
		<property name="maxAllowedTimeMillis" value="1000"></property>
	</bean>
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.jy..*.service.*Service*.*(..))" advice-ref="performanceInterceptor" />
	</aop:config>
 	<!-- 定义检测执行时间的拦截器end -->
 	

	<!-- 异常信息处理 
    <bean id="exceptionResolver" class="com.jy.platform.restservice.exception.CustomExceptionHandler"/>  
	-->
	<!-- JSR303 Validator定义 -->
 	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	<bean id="sessionAPI" class="com.jy.modules.platform.sysauth.service.shiro.SessionAPImpl" />
	<bean id="orgAPI" class="com.jy.modules.platform.sysorg.impl.OrgAPImpl" />
	<bean id="sysAuthAPI" class="com.jy.modules.platform.sysauth.impl.SysAuthAPImpl" />
	<bean id="sysDictAPI" class="com.jy.modules.platform.sysdict.impl.SysDictAPImpl" />
	<bean id="dataPrvAPI" class="com.jy.modules.platform.dataprv.sysprvbizuser.impl.DataPrvAPImpl" />
	<bean id="sysConfigAPI" class="com.jy.modules.platform.sysconfig.impl.SysConfigAPImpl" />
	<bean id="sysRoleAPI" class="com.jy.modules.platform.sysauth.impl.SysRoleAPImpl" />
	<bean id="sysIndustryAPI" class="com.jy.modules.platform.sysindustry.impl.SysIndustryImpl" />
	<bean id="sysAreaAPI" class="com.jy.modules.platform.sysarea.impl.SysAreaAPImpl" />
	 
	 
	<!-- 引入 其他配置信息 -->
  	<import resource="classpath*:spring/*-spring.xml" />

 	<!--  启用 定时任务 	 
 	<import resource="classpath*:quartz/*-spring.xml" />
    -->
</beans>