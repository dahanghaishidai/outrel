<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"  xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
	default-lazy-init="true">

	<description>Spring公共配置 </description>
	<!-- 启用aop 注解方式 -->
	<aop:aspectj-autoproxy/>
	
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入  将 Controller 排除-->
	<context:component-scan base-package="com.jy">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jy" />
		<property name="annotationClass" value="com.jy.platform.core.mybatis.MyBatisRepository"/>
	</bean>

	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:/jdbc.properties</value>
				<value>classpath*:/CAS_SSO.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="dataSourceDruid" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 数据库连接池配置 -->
		<property name="initialSize" value="${jdbc.initialPoolSize}" />
		<!-- 初始化连接数量 -->
		<property name="maxActive" value="${jdbc.maxPoolSize}" />
		<!-- 最大连接数量 -->
		<property name="maxIdle" value="${jdbc.maxIdlePollSize}" />
		<!-- 最大空闲连接数量 -->
		<property name="minIdle" value="${jdbc.mixIdlePollSize}" />
		<!-- 最小空闲连接数量 -->
	</bean>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <!-- <property name="validationQuery" value="${druid.validationQuery}" /> -->
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}" />
    </bean>
	
    <!-- MyBatis配置 -->
    <bean id="pageInterceptor" class="com.jy.platform.restservice.mybatis.PageInterceptor"></bean>    
	<bean id="sqlSessionFactory" class="com.jy.platform.restservice.mybatis.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="plugins">  
            <ref bean="pageInterceptor"/>  
        </property>  
		<!-- 自动扫描domain目录, 配置包的基路径即可，多个包用;分割 -->
		<property name="typeAliasesPackage" value="com.jy" />
		<!-- 显式指定Mapper文件位置 -->	
		<!-- <property name="mapperLocations" value="classpath*:**/*Mapper.xml" /> -->
		<property name="mapperLocations" >
			<list>
				<value>classpath*:com/jy/**/dao/*Mapper.xml</value>
				<value>classpath*:mybatis/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	
	
	<!-- 事务管理start -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

	<!-- 使用annotation 定义 注解事务 优先 使用注解事务 order="0" -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" order="0" />
	<!-- 用注解来实现事务管理 -->
	
	<!-- 以AspectJ方式 定义 AOP 用于事务拦截 -->
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.jy..service..*.*(..))" advice-ref="txAdvice" order="1"/>
	</aop:config>
	<!-- 基本事务定义,使用transactionManager作事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />	
			<tx:method name="create*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception,RuntimeException"/>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="do*" propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="*" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>
	<!-- 事务管理 end -->
	
    
    <!-- find/create cache拦截器redis 缓存 -->
    <bean id="methodCacheInterceptor" class="com.jy.platform.core.ehcache.MethodRedisCacheInterceptor">  
      <property name="pool" ref="jedisSentinelPool"></property>
    </bean>  
    <!-- flush cache拦截器 -->
    <bean id="methodCacheAfterAdvice" class="com.jy.platform.core.ehcache.MethodRedisCacheAfterAdvice">  
      <property name="pool" ref="jedisSentinelPool"></property>
    </bean>
    <bean id="methodCachePointCut" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">  
    
      <property name="advice" ref="methodCacheInterceptor"/>  
      <property name="patterns">  
        <list>
            <!-- <value>com.jy.modules.platform.sysorg.service.*query.*</value>  
            <value>com.jy.modules.platform.sysorg.service.*find.*</value> -->  
            <!-- <value>com.jy.modules.platform.sysorg.service.*search.*</value>   -->
            <value>com.jy.modules.platform.sysconfig.service.*query.*</value>  
            <value>com.jy.modules.platform.sysconfig.service.*find.*</value>  
           <!--  <value>com.jy.modules.platform.sysconfig.service.*search.*</value>   -->
            <value>com.jy.modules.platform.sysdict.service.*query.*</value>  
            <value>com.jy.modules.platform.sysdict.service.*find.*</value>  
            <value>com.jy.modules.platform.sysdict.service.*search.*</value>  
            
            <value>com.jy.modules.platform.sysauth.service.SysResourceService.*getSysResourceUrl*</value>
            <value>com.jy.modules.platform.sysauth.service.SysResourceService.*getSysResourceRole*</value>
            <value>com.jy.modules.platform.sysauth.service.SysResourceService.*getSysResourcePermission*</value>
            <value>com.jy.modules.platform.sysauth.service.SysResourceService.*getSysResourceAllUrl*</value>
        </list>  
      </property>  
    </bean>  
    <bean id="methodCachePointCutAdvice" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">  
      <property name="advice" ref="methodCacheAfterAdvice"/>  
      <property name="patterns">  
        <list>  
          <value>com.jy.modules.platform.sysorg.service.*update.*</value>  
          <value>com.jy.modules.platform.sysorg.service.*delete.*</value>  
          <value>com.jy.modules.platform.sysorg.service.*insert.*</value>  
          <value>com.jy.modules.platform.sysconfig.service.*update.*</value>  
          <value>com.jy.modules.platform.sysconfig.service.*delete.*</value>  
          <value>com.jy.modules.platform.sysconfig.service.*insert.*</value>
          <value>com.jy.modules.platform.sysdict.service.*update.*</value>  
          <value>com.jy.modules.platform.sysdict.service.*delete.*</value>  
          <value>com.jy.modules.platform.sysdict.service.*insert.*</value>
          
          <value>com.jy.modules.platform.sysauth.service.SysAclService.*insert*</value>
          <value>com.jy.modules.platform.sysauth.service.SysAclService.*update*</value>
          <value>com.jy.modules.platform.sysauth.service.SysAclService.*delete*</value>
          <value>com.jy.modules.platform.sysauth.service.SysResourceService.*insert*</value>
          <value>com.jy.modules.platform.sysauth.service.SysResourceService.*update*</value>
          <value>com.jy.modules.platform.sysauth.service.SysResourceService.*delete*</value>
          <value>com.jy.modules.platform.sysauth.service.SysRoleService.*insert*</value>
          <value>com.jy.modules.platform.sysauth.service.SysRoleService.*update*</value>
          <value>com.jy.modules.platform.sysauth.service.SysRoleService.*delete*</value>
          <value>com.jy.modules.platform.sysauth.service.SysRoleUserService.*insert*</value>
          <value>com.jy.modules.platform.sysauth.service.SysRoleUserService.*update*</value>
          <value>com.jy.modules.platform.sysauth.service.SysRoleUserService.*delete*</value>
        </list>  
      </property>  
    </bean>
    <!-- redis菜单资源缓存 start-->
    <bean id="menuMethodCacheInterceptor" class="com.jy.platform.core.ehcache.MenuMethodRedisCacheInterceptor">
       <property name="pool" ref="jedisSentinelPool"></property> 
    </bean>
    <bean id="menuMethodCacheAfterAdvice" class="com.jy.platform.core.ehcache.MenuMethodRedisCacheAfterAdvice">
      <property name="pool" ref="jedisSentinelPool"></property> 
    </bean>
    <bean id="menuMethodCachePointCut" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">  
      <property name="advice" ref="menuMethodCacheInterceptor"/>  
      <property name="patterns">  
        <list>
            <value>com.jy.modules.platform.sysMenu.service.SysMenuService.*searchSysMenuForHome*</value>
        </list>  
      </property>  
    </bean>  
    <bean id="menuMethodCachePointCutAdvice" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">  
      <property name="advice" ref="menuMethodCacheAfterAdvice"/>  
      <property name="patterns">  
        <list>  
          <value>com.jy.modules.platform.sysauth.service.SysResourceService.*update*</value>
          <value>com.jy.modules.platform.sysauth.service.SysResourceService.*insert*</value>
          <value>com.jy.modules.platform.sysauth.service.SysResourceService.*delete*</value>
          <value>com.jy.modules.platform.sysMenu.service.SysMenuService.*update*</value>
          <value>com.jy.modules.platform.sysMenu.service.SysMenuService.*insert*</value>
          <value>com.jy.modules.platform.sysMenu.service.SysMenuService.*delete*</value>
        </list>  
      </property>  
    </bean> 
    <!-- redis菜单资源缓存 end-->
    
    <!-- 加载异常定义文件 并拦截start -->
   	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="messages" />
	</bean>
	<bean id="exceptionResolver" class="com.jy.platform.restservice.exception.handler.AbaboonHandlerExceptionResolver"/>  
	<!-- 加载异常定义文件 并拦截end -->
	
	<!-- JSR303 Validator定义 -->
 	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	<bean id="sessionAPI" class="com.jy.modules.platform.sysauth.service.shiro.SessionAPImpl" />
	<bean id="orgAPI" class="com.jy.modules.platform.sysorg.impl.OrgAPImpl" />
	<bean id="sysAuthAPI" class="com.jy.modules.platform.sysauth.impl.SysAuthAPImpl" />
	<bean id="sysDictAPI" class="com.jy.modules.platform.sysdict.impl.SysDictAPImpl" />
	<bean id="dataPrvAPI" class="com.jy.modules.platform.dataprv.sysprvbizuser.impl.DataPrvAPImpl" />
	<bean id="sysConfigAPI" class="com.jy.modules.platform.sysconfig.impl.SysConfigAPImpl" />
	<bean id="sysRoleAPI" class="com.jy.modules.platform.sysauth.impl.SysRoleAPImpl" />
	<bean id="sysIndustryAPI" class="com.jy.modules.platform.sysindustry.impl.SysIndustryImpl" />
	<bean id="sysAreaAPI" class="com.jy.modules.platform.sysarea.impl.SysAreaAPImpl" />
	
	
	<!-- 引入redis 缓存 消息提醒使用 -->
	<import resource="classpath*:/spring-redis.xml" />
	<!-- 引入 其他配置信息 -->
  	<import resource="classpath*:spring/*-spring.xml" />
 	<!--  启用 定时任务-->
<!--  	<import resource="classpath*:quartz/*-spring.xml" /> -->
 	
 	<!-- 單文件同步上傳服務 -->
    <bean id="synSingleFileUploadWorker" class="com.jy.platform.core.fastdfs.task.SynSingleFileUploadWorker" />
	<bean id="synSingleFileDownloadWorker" class="com.jy.platform.core.fastdfs.task.SynSingleFileDownloadWorker" />

    <!-- 平台监控功能-->
<!--     <bean id="MonitorClient"  class="com.jy.modules.platform.monitor.client.MonitorClient" scope="singleton"/> -->

    <!--redis锁-->
    <bean id="distributedLock" class="com.jy.platform.core.redis.lock.RedisLock">
        <property name="pool" ref="jedisSentinelPool"></property>
    </bean>
</beans>